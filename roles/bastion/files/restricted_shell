#!/bin/bash

# variables
REMOTE_COMMAND=ssh
REMOTE_HOST=master.codeshelf.com
REMOTE_USER=ansible
USER_KEY=/home/$USER/.ssh/id_rsa
PAGER=less
LOGGER=/usr/bin/logger

# log session start
echo "ControlPanel User $USER Started Session" | $LOGGER

# main menu
main_menu () {
	echo " "
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!!  Authorized use only   !!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!! Please be very careful !!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo " "
        echo "status <hostname> - retrieve host healthcheck"
        echo "start-daemon <hostname> - start Codeshelf daemon"
        echo "stop-daemon <hostname> - stop Codeshelf daemon"
        echo "restart-daemon <hostname> - restart Codeshelf daemon"
        echo "reset-daemon <hostname> - wipe daemon and re-download"
        echo "ansible-host <hostname> - run Ansible"
        echo "readme - print manual"
        echo " "
        echo "Command:"

	# read input and use readline for line editing
        read -e INPUT_TEXT

	INPUTARRAY=($INPUT_TEXT)
        COMMAND=${INPUTARRAY[0]}
        HOST=${INPUTARRAY[1]}
        ARGUMENT=${INPUTARRAY[2]}

	# Log Input
	echo 'ControlPanel User $USER entered $COMMAND $HOST $ARGUMENT' | $LOGGER

        case $COMMAND in
                'status')
                        remote_command status
                ;;
                'uptime')
                        remote_command uptime
                ;;
                'pstree')
                        remote_command pstree
                ;;
                'start-daemon')
                        remote_command start-daemon
                ;;
                'stop-daemon')
                        remote_command stop-daemon
                ;;
                'restart-daemon')
                        remote_command restart-daemon
                ;;
                'reset-daemon')
                        remote_command reset-daemon
                ;;
                'ansible-host')
                        remote_command ansible-host
                ;;
                'reboot-host')
                        remote_command reboot-host
                ;;
                'codeshelf-versions')
                        remote_command codeshelf-versions
                ;;
                'promote-stage')
                        remote_command promote-stage
                ;;
                'upgrade-codeshelf')
                        remote_command upgrade-codeshelf
                ;;
                'upgrade-codeshelfux')
                        remote_command upgrade-codeshelfux
                ;;
                'readme')
                        print_readme | less
                ;;
                'help')
                        print_readme | less
                ;;
                'exit')
                        logout
                ;;
                'logout')
                        logout
                ;;
                'passwd')
                        passwd
                ;;
                'google-authenticator')
                        google-authenticator
                ;;
                *)
                        echo "Unknown command, try again"
                ;;
        esac
}

# run the secure remote command
remote_command () {
	# input is first argument
	RUNCMD=$1

	# do input checking on hostname..
	if [[ $HOST ]]
	then
		if [[ ! ($HOST == "aldebaran" ||
			$HOST == "betelgeuse" ||
			$HOST == "capella" ||
			$HOST == "deneb"  ||
			$HOST == "test"  ||
			$HOST == "stage"  ||
			$HOST =~ ^sc[0-9]{5} ) ]]
		then
			echo "Invalid host"
			return
		fi
	fi

	# something like:
	# ssh -i /home/foobar/.ssh/id_rsa ansible@ansiblehost status sc10000 | less
	$REMOTE_COMMAND -i ${USER_KEY} ${REMOTE_USER}@${REMOTE_HOST} $RUNCMD $HOST $ARGUMENT | $PAGER

	clear
}

# print out some help
print_readme () {
	cat <<EOF
Available commands:
status
start-daemon
stop-daemon
restart-daemon
reboot-host
 * Power cycle host
uptime
 * Prints output from Linux command "uptime"
pstree
 * Prints output from Linux command "pstree"
reset-daemon
 * Deletes everything in /opt/codeshelf and runs Ansible
ansible-host
 * Runs Ansible to enforce configuration
codeshelf-versions
 * Prints deployed version information
promote-stage
 * Makes release out of code in stage
upgrade-codeshelf
 * Takes argument and fixes symlinks
upgrade-codeshelfux
 * Takes argument and fixes symlinks
passwd
 * Change password
google-authenticator
 * Reset your security token

Most command output is displayed in a pager, like less.

EOF
}

# start of shell
while true
do
        main_menu
done
# end of shell

