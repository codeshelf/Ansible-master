#!/bin/bash

# variables
REMOTE_COMMAND=ssh
REMOTE_HOST=master.codeshelf.com
REMOTE_USER=ansible
USER_KEY=/home/$USER/.ssh/id_rsa
PAGER=less

# main menu
main_menu () {
	echo " "
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!!  Authorized use only   !!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!! Please be very careful !!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo " "
        echo "status <hostname> - retrieve host status, live"
        echo "uptime <hostname> - retrieve output of uptime"
        echo "start-daemon <hostname> - start Codeshelf daemon"
        echo "stop-daemon <hostname> - stop Codeshelf daemon"
        echo "restart-daemon <hostname> - restart Codeshelf daemon"
        echo "reset-daemon <hostname> - wipe daemon and re-download"
        echo "ansible-host <hostname> - run fep or sitecons ansible playbook"
        echo "reboot-host <hostname> - reboot Codeshelf server"
        echo "readme - print manual"
        echo " "
        echo "exit - logout"
        echo " "
        echo "Command:"
        read -e INPUT_TEXT

        COMMAND=`echo $INPUT_TEXT | cut -d\  -f 1`
        HOST=`echo $INPUT_TEXT | cut -d\  -f 2`

        # do input checking on hostname..
       if [[ ! ($HOST == "aldebaran" ||
               $HOST == "betelgeuse" ||
               $HOST == "capella" ||
               $HOST == "deneb"  ||
               $HOST =~ ^sc[0-9]{5} ) ]]
       then
               echo "Invalid host"
               return
       fi

        case $COMMAND in
                'status')
                        remote_command status
                ;;
                'uptime')
                        remote_command uptime
                ;;
                'pstree')
                        remote_command pstree
                ;;
                'start-daemon')
                        remote_command start-daemon
                ;;
                'stop-daemon')
                        remote_command stop-daemon
                ;;
                'restart-daemon')
                        remote_command restart-daemon
                ;;
                'reset-daemon')
                        remote_command reset-daemon
                ;;
                'ansible-host')
                        remote_command ansible-host
                ;;
                'reboot-host')
                        remote_command reboot-host
                ;;
                'readme')
                        print_readme
                ;;
                'help')
                        print_readme
                ;;
                'exit')
                        exit
                ;;
                *)
                        echo "Unknown command, try again"
                ;;
        esac
}

# run the secure remote command
remote_command () {
        # input is first argument
        RUNCMD=$1
        # something like:
        # ssh -i /home/foobar/.ssh/id_rsa ansible@ansiblehost status sc10000 | less
        #echo "$REMOTE_COMMAND -i ${USER_KEY} ${REMOTE_USER}@${REMOTE_HOST} $RUNCMD $HOST | $PAGER"
        $REMOTE_COMMAND -i ${USER_KEY} ${REMOTE_USER}@${REMOTE_HOST} $RUNCMD $HOST | $PAGER
}

# print out some help
print_readme () {
	cat <<EOF
These commands do the obvious:
status
start-daemon
stop-daemon
restart-daemon
reboot-host

This command deletes broken software and puts it back fresh:
* Deletes everything in /opt/codeshelf
* Runs ansible
reset-daemon

This command runs ansible:
* Pushes new configurations
* Upgrades software
ansible-host

Additional commands:
pstree - show process tree
EOF
}

# start of shell
while true
do
	clear
        main_menu
done
# end of shell

